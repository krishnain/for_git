==============================================
Day 1
==============================================

Configuration Management
===========================
This is the process of handling activites of multiple
servers from one point of control

Advantages
==============
1 Provisioning of Servers
  Activites like installing s/w applications,deleting s/w,upgrading
configuring patches can be done very quickly 

2 Resource Saving
  The time taken to configure any number of servers become very less
and the number of people who are required for these server configurations
also becomes less

3 Usefull in Disaster Recovery
  To handle disaster recovery organizations maintain replica data centers
at different geographical locations.Creation of these replica data centers
can be done very easily

4 Handling snowflake servers
  After a point of time all servers present in a data center behave like
snowflakes ie they run on slightly different h/w and s/w configurations.
Configuration Management tools can pick up this info and store in simple
config files which can be used later to setup similar environments

5 Idempotent
  Configuration managment tools are used to bring the remote to a state
called as the "desired state".If the remote servers are already in the 
desired state configuration management tools will not reconfigure these
server

Important Configuration Management Tools
=============================================
1 Ansible
2 Chef 
3 Puppet






Ansible
=============
This is an open source configuration management tool created using python
The main machine where ansible is installed is called as "Controller"
and the remianing remote servers that we are configuring are called as 
"managed nodes/hosts"

From the controller to the managed nodes we should have passwordless
shh connectivity

Ansible is called as "agentless" ie we need not install any client 
s/w of ansible on the remote managed nodes.It uses "push" methodolgy
to push the configurations into the remote servers.

=========================================================================
Setup of Ansible
====================
1 Create 3 or 4 AWS ubuntu 18 instances
2 NAme the 1st one as controller and remaining 2 as server1 and server2
3 Establish Passwordless ssh from Controller to Server1 and Server2
  a) Connect to server1 using gitbash
  b) Setup password for the default user
     sudo passwd ubuntu
  c) Edit the ssh configuration file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  d) Restart ssh
     sudo service ssh restart
     Repeat the above steps from a to d on Server2 managed node
  e) Connect to Controller using git bash
  f) Generate the ssh keys
     ssh-keygen
  g) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_server1
     Repeat step g with ipaddress of Server2

4 Installing Ansible
  a) Update the apt repository
     sudo apt-get update
  b) Install software-properties-common
     sudo apt-get install -y software-properties-common
  c) Add the latest version of Ansible to apt repository
     sudo apt-add-repository ppa:ansible/ansible
  d) Update the apt repository
     sudo apt-get update
  e) Install ansible
     sudo apt-get install -y ansible

5 To check the verision of ansible
  ansible --version

Ansible stores all the remote servers info in a file called as inventory file
We should open this file and store the ipaddress of all the managed nodes here

sudo vim /etc/ansible/hosts
Here copy and paste the ipaddresses of the managed nodes


==============================================================================
Ansible performs remote configuration of servers in
3 different ways
1 Adhoc commands
2 Playbooks
3 Roles

Ansible uses prebuild Python modules for configuring remote
servers

Important modules in Ansible
===================================
1 command: This is used to execute linux commands on the remote managed
nodes.It is the default module of Ansible

2 shell: This is used to execute shell scripts on the remote managed nodes
  it can execute command related to redirection and piping

3 user: This is used to perform user administartion on the remote servers
like creating users,assigning home dirs deleting users etc

4 file: Used for creating files/directories on the managed nodes

5 copy: This used to copy files/directories to the managed node

6 fetch: Used to copy files/directories from managed nodes to controller

7 apt: Used to for s/w package management like isntalling,deleting,upgrading
  etc.It works on Ubuntu,Debain flvours of linux

8 yum: This is similar to apt but it works on Rehat linux,Centos,Fedora etc
  flavours of Linux

9 service: Used to start stop or restart services on the managed nodes

10 uri: Used to check if a remote url is reachable or not

11 git: Used for perfroming git version controlling on the managed nodes

12 get_url: Used for downloading files from remote servers into the managed nodes

13 stat: Used to capture detailed info about files/directories on the managed nodes

14 debug: Used to display the output in JSON file format

15 include: USed to call child playbooks from a parent playbook

16 replace: Used to replace specific portions of the text in a file

17 docker_container: Used for container management on the managed nodes

18 docker_image: Used to run command related to docker images

19  ping: Used to check if the remote servers are pingable

20 pause: Used to pause the playbook


================================================================================
Day 2
============================================================================
Adhoc commands
====================
Syntax of Adhoc commands
--------------------------------------
ansible all/ipaddress/group_name  -i path_of_inventory -m module_name 
                                                            -a '          ' 


Command Module
==================
Ansible command to see the memory information of all managed nodes
ansible all -i /etc/ansible/hosts -m command -a 'free m'

/etc/ansible/hosts is the default inventory file and when using it
we need not give -i
ansible all  -m command -a 'free m'

command module is the default module os ansible and we need not  use
-m option when working on command module
ansible all   -a 'free m'

====================================================================
Shell Module
-----------------
Ansible commands to downlaod the docker script and execute it to install docker
ansible all -m shell -a ' curl -fsSL https://get.docker.com -o get-docker.sh'

ansible all -m shell -a 'sh get-docker.sh'

--------------------------------------------------------------------------
Ansible command to capture memory statics into a file called as file1
ansible all -m shell -a 'free -m > file1'

=====================================================================
User Module
=================
Ansible command to create a user and assign a password
ansible all -m user -a 'name=sai password=intelliqit' -b

Ansible command to create a user,assign home dir,default shell
uid,comment etc
 ansible all -m user -a 'name=Anu password=intelliqit 
          home=/home/ubuntu/Anu uid=12345 shell=/bin/bash 
                                     comment="A normal user"' -b


================================================================================
Ansible command to create file on all managed nodes
ansible all -m file -a 'name=/tmp/file1 state=touch'

state=touch    create files
state=directory creates directories
state=absent    delete files/directories



Ansible command to create file and also specify the owner,group owner
and permissions
ansible all -m file -a 'name=/tmp/file1 state=touch owner=sai 
                                                group=Anu mode=750' -b


===========================================================================
Ansible command to copy /etc/passwd file to all managed nodes
 ansible all -m copy -a 'src=/etc/passwd dest=/tmp'

Create a chain of directories on the controller and copy all that to
the managed nodes
mkdir -p d1/d2/d3/d4/d5
ansible all -m copy -a 'src=d1 dest=/home/ubuntu'

Copy module can also change the permissions,ownership and group ownership
of files that are copied
ansible all -m copy -a 'src=file1 dest=/tmp owner=root 
                                                  group=sai mode=700' -b

Copy module can also change the content of a file
ansible all -m copy -a 'content="Welcome to IntelliQIT\n" dest=/tmp/file80'

=========================================================================
Day 3
===============================================================================
apt modules
=======================
Ansible command to install git on all managed nodes
ansible all -m apt -a 'name=git state=present' -b

state=present is for installation
state=absent is for uninstallation
state=latest  is for upgrading to a later version

To update the apt repository we can use
update_cache-yes
Ansible command to install tomcat9 after updating the apt repository
ansible all -m apt -a 'name=tomcat9 state=present update_cache=yes' -b

========================================================================
Service module
===================
Ansible command to restart tomcat on all managed nodes
 ansible all -m service -a 'name=tomcat9 state=restarted' -b

state=restarted is for restarting
state=stopped is for stopping
state=started is for starting 

========================================================================
=========================================================================
git module
=================
Ansible command to download from a remote git repository
ansible all -m git -a 'repo=https://github.com/intelliqittrainings/maven.git dest=/tmp/mygit' -b

=============================================================================
get_url
==============
Ansible command to download jenkins.war into all managed nodes
 ansible all -m get_url -a 
       'url=https://get.jenkins.io/warstable/2.277.2/jenkins.war  dest=/tmp'


===============================================================================
Replace module
=====================
Ansible command to change the pot of tomcat from 8080 to 9090

ansible all -m replace -a 'regexp=8080 replace=9090 path=/etc/tomcat9/server.xml' -b
ansible all -m service -a 'name=tomcat9 state=restarted' -b


==============================================================================
uri module
====================
Ansible command to check if google.com is reachable from all managed nodes
ansible all -m uri -a 'url=http://google.com status_code=200'

==============================================================================
fetch module
=======================
Ansible command to fetch the /etc/passwd file from all managed nodes
ansible all -m fetch -a 'src=/etc/passwd dest=/tmp' -b

------------------------------------------------------------------------------
Configure apache2 on all managed nodes
========================
1 Install apache2 on all managed nodes
  ansible all -m apt -a 'name=apache2 state=present update_cache=yes' -b

2 Edit the index.html file
  ansible all -m copy -a 'content="Welcome to IntelliqIT"                                                             dest=/var/www/html/index.html' -b

3 Restart apache2
  ansible all -m service -a 'name=apache2 state=restarted' -b

4 Check the url response of apache2
  ansible all -m uri -a 'url=http://172.31.28.60 status_code=200'
  ansible all -m uri -a 'url=http://172.31.23.20 status_code=200'

=======================================================================
Configuring tomcat9
==========================
1 Install tomcat9 and tomcat9-admin
  ansible all -m apt -a 'name=tomcat9 state=present update_cache=yes' -b
  ansible all -m apt -a 'name=tomcat9-admin state=present' -b

2 Copy the tomcat-users.xml file
  ansible all -m copy -a 'src=tomcat-users.xml dest=/etc/tomcat9' -b


3 Restart tomcat
  ansible all -m service -a 'name=tomcat9 state=restarted' -b 

4 Check the url reponse of tomcat
  ansible all -m uri -a 'url=http://172.31.28.60:8080 status_code=200' -b
  ansible all -m uri -a 'url=http://172.31.23.20:8080 status_code=200' -b


===============================================================================
Day 4
===============================================================================
=======================================================================
Ansible Playbooks
========================
Adhoc commands become difficutl to handle when working on complex
configurations of s/w applications.
Each adhoc command can work only on one module and one set of
arguments.In such cases we can use Ansible playbooks which 
support greater reusability.
Playbooks are created using yaml and each playbook is a combination of
multiple plays.A play contains info about what module has to be 
executed.These plays are designed to work on a single host or a
group of hosts or all the hosts

============================================================================
Anible playbook to create a user on all managed nodes

vim playbook1.yml
---
- name: Create user
  hosts: all
  tasks:
   - name: User creation
     user:
      name: Anu
      password: intelliqit
      uid: 3456
      home: /home/ubuntu/Anu
      comment: "A regular user"
      shell: /bin/bash
...

To check if the playbook is syntaxtically correct or not
ansible-playbook playbook1.yml --syntax-check

To execute the playbook
ansible-playbook playbook1.yml -b
====================================================================
Ansible playbook to configure apache2
vim playbook2.yml
---
- name: Configuring apache2
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
      update_cache: yes
   - name: Edit the index.html file
     copy:
      content: "IntelliQIT"
      dest: /var/www/html/index.html
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Check the url response of apache2 on server1
     uri:
      url: http://172.31.18.115
      status_code: 200
   - name: Check the url response of apache2 on server2
     uri:
      url: http://172.31.30.86
      status_code: 200
...

To run the playbook
ansible-playbook playbook2.yml -b

======================================================================
Ansible playbook to configure tomcat9
- name: Configuring tomcat
  hosts: all
  tasks:
   - name: Install tomcat9
     apt:
      name: tomcat9
      state: present
      update_cache: yes
   - name: Install tomcat9-admin
     apt:
      name: tomcat9-admin
      state: present
      update_cache: no
   - name: Copy tomcat-users.xml
     copy:
      src: tomcat-users.xml
      dest: /etc/tomcat9/
   - name: Change port of tomcat from 8080 to 9090
     replace:
      regexp: 8080
      replace: 9090
      path: /etc/tomcat9/server.xml
   - name: Restart tomcat9
     service:
      name: tomcat9
      state: restarted
   - name: Pause for 3 mins
     pause:
      minutes: 3
   - name: Check tomcat response on server1
     uri:
      url: http://172.31.30.86:9090
      status_code: 200
   - name: Check tomcat response on server2
     uri:
      url: http://172.31.18.115:9090
      status_code: 200
...

To execute the playbook
ansible-playbook playbook3.yml -b
=======================================================================
Ansible playbook to copy file from one managed node to another

---
- name: Fetch file from server1 to controller
  hosts: 172.31.16.227
  tasks:
   - name: Fetch the file
     fetch:
      src: file34
      dest: /tmp
- name: Copy the file into server2
  hosts: 172.31.24.0
  tasks:
   - name: Copy the file
     copy:
      src: /tmp/172.31.16.227/file34
      dest: /tmp

======================================================================
Day 5
========================================================================
Variables
=================
These are used for acheving greater reusability of the playbooks
They are catogired into 3 types
1 Global Scope Variables
2 PlayScope Variables
3 Host Scope variables

Global Scope variables are passed from the command prompt
using "--extra-vars" and they have the highest level of
priority

Host scope varibales are again classified into 2 type
a) Varibales to work on a group of hosts
b) Variables to work on a single host
Host scope variables have the second level of priority after global scope
varibales

Playscope variables are defined within the playbooks and they have the least
level of priority

==============================================================================
Ansible playbook for installing/uninstalling s/w applications
using global scope varibales

vim playbook5.yml
---
- name: Install s/w applications using variables
  hosts: all
  tasks:
   - name: Install/uninstall s/w app
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

The above playbook can be used with different sets of data
ansible-playbook playbook5.yml  --extra-vars "a=git b=present c=yes" -b
ansible-playbook playbook5.yml  --extra-vars "a=tree b=absent c=no" -b
ansible-playbook playbook5.yml  --extra-vars "a=tomcat b=present c=no" -b

==============================================================================
Ansible playbook to create users and create files and dirs
---
- name: Create users and create files/dirs in users home dir
  hosts: all
  tasks:
   - name: Create users
     user:
      name: "{{a}}"
      password: "{{b}}"
      home: "{{c}}"
   - name: Create files/dirs in users home dir
     file:
      name: "{{d}}"
      state: "{{e}}"
...

To execute the playbook with different sets of data
ansible-playbook playbook7.yml --extra-vars "a=Anu b=intelliqit c=/home/Anu                                               d=/home/Anu/dir1 e=directory" -b

ansible-playbook playbook7.yml --extra-vars "a=Ramesh b=intelliqit c=/home/Ramesh                                                d=/home/Ramesh/file1 e=touch" -b

=============================================================================


PlayScope varibales
=======================
These variables are defined within a play and they can
work only on that play

vim playbook8.yml
---
- name: Install s/w applications
  hosts: all
  vars:
   - a: tomcat9
   - b: present
   - c: yes
  tasks:
   - name: Install s/w
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

The above playbook works like a template whose default behaviour is to
install tomcat9 but we can bypass that behaviour and make it work on
some other sets of data by passsing global scope variables using 
--extra-vars

ansible-playbook playbook8.yml  --extra-vars "a=apache2 b=absent" -b


==============================================================================
Grouping in inventory file
================================
sudo vim /etc/ansible/hosts
[webserver]
172.31.55.129
172.31.48.61
[apserver]
172.31.50.184
[dbserver]
172.31.59.180
172.31.50.184
[servers:children]
webserver
apserver


==========================================================================
Host Scope Variables
-----------------------
These variables are further classified into 2 types
1) Variables to work on a group of hosts
2) Variables to work on a single host

Variables to work on a group of hosts
=========================================
These variables are create in a directory "group_vars"
This directory is created in the same folder where the playbooks
are present.In the group_vars directory we create a file whose
name is same as group name from the inventory file

1 Go to the folder where the playbooks are present
  cd path_of_playbooks_folder

2 Create a directory group_vars and move into it
  mkdir group_vars
  cd group_vars

3 Create a file whose name is same as a group name from the inventory file
  vim webserver
  ---
  a: firewalld
  b: present
  c: no
  ...

4 Go back to the folder where the playbooks are present
  cd ..
  
5 Create a playbook for using the above variables
vim playbook8.yml
---
- name: Install firewall  using host scope variables
  hosts: webserver
  tasks:
   - name: Install firewall
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...
      

6 To execute the playbook
  ansible-playbook playbook8.yml -b





==========================================================================
Variables to work on a single host
--------------------------------------
These variables should be created in a file whose name is same as ip
address of a remote managed node and this file should be created in
a folder called "host_vars" and this folder should be created in the folder
where all our playbooks are present

1 Go to the folder where the playbooks are present
  cd path_of_playbooks_folder

2 Create a directory host_vars and move into it
  mkdir host_vars
  cd host_vars

3 Create a file whose name is same as a ipaddress of a managed node
  from the inventory file
  vim 172.31.56.218
  ---
  a: Radha
  b: intellqiit
  c: 1243
  d: /home/Radha
  e: /bin/bash
  ...

4 Go back to the folder where the playbooks are present
  cd ..

5 Create a playbook to use the above varibles
vim playbook9.yml
---
- name: create user using host scope varibles
  hosts: 172.31.56.218
  tasks:
   - name: create user
     user:
      name: "{{a}}"
      password: "{{b}}"
      uid: "{{c}}"
      home: "{{d}}"
      shell: "{{e}}"
...

6 To execute the playbook
  ansible-playbook playbook9.yml -b


...

6 To run the playbook
  ansible-playbook playbook10.yml -b


===============================================================
Day 6
==============================================================
